#ifndef _SHOCO_INTERNAL
#error This header file is only to be included by 'shoco.c'.
#endif
#pragma once
/*
This file was generated by 'generate_compressor_model.py'
so don't edit this by hand. Also, do not include this file
anywhere. It is internal to 'shoco.c'. Include 'shoco.h'
if you want to use shoco in your project.
*/

#define MIN_CHR 49
#define MAX_CHR 91

#define SHOCO_PY_EMPTY -66

static const char chrs_by_chr_id[32] = {
  'E', 'A', 'I', 'R', 'T', 'O', 'N', 'S', 'L', 'C', 'D', 'M', 'U', 'P', 'G', 'B', 'V', 'J', 'F', 'H', 'K', 'Z', 'W', 'Q', 'Y', '1', '3', '2', 'X', '4'
};

static const int8_t chr_ids_by_chr[256] = {
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 27, 26, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 15, 9, 10, 0, 18, 14, 19, 2, 17, 20, 8, 11, 6, 5, 13, 23, 3, 7, 4, 12, 16, 22, 28, 24, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

static const int8_t successor_ids_by_chr_id_and_chr_id[32][32] = {
  {6, 8, 7, 0, 4, -1, 1, 2, 3, 9, 11, 5, -1, 13, 10, 15, -1, -1, -1, -1, 14, 12, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {-1, 10, 6, 0, 3, -1, 2, 1, 4, 8, 7, 5, -1, 13, 12, 9, 11, -1, 14, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {2, 3, -1, 11, 5, 6, 1, 0, 7, 4, 12, 9, -1, -1, 8, -1, 15, 10, 14, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 2, 10, 4, 3, 12, 5, -1, 13, 6, 8, 7, 15, 9, 11, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 2, 1, 3, 6, 5, -1, 8, 14, -1, -1, -1, 7, -1, 11, 10, 15, 4, -1, 9, 13, -1, 12, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {7, -1, -1, 1, 6, 5, 0, 2, 3, 11, 12, 4, 9, 8, 10, 14, 13, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {2, 3, 7, -1, 0, 5, 9, 4, -1, 8, 1, -1, 14, -1, 6, 15, 12, -1, 11, -1, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 5, 4, -1, 0, 7, -1, 2, 10, 3, -1, 9, 8, 6, 14, 12, -1, 11, 13, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 2, -1, 6, 3, -1, 8, 4, 14, 7, 9, 5, 12, 13, 15, 11, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {4, 0, 3, 7, 8, 1, 14, 13, 9, 5, -1, -1, 6, -1, -1, -1, -1, 15, -1, 2, 10, -1, -1, 12, 11, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 3, 1, 4, 13, 2, -1, 6, 14, -1, 8, -1, 5, -1, 10, 9, 12, 7, -1, -1, 15, -1, 11, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 2, 3, -1, 10, 0, 12, 8, -1, -1, 9, 5, 7, 4, 13, 6, 14, -1, -1, 15, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {2, 7, 1, 0, 5, -1, 6, 4, 3, 8, 10, 9, -1, 13, 11, 12, -1, -1, 15, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 2, 4, 9, 3, -1, 10, 5, -1, -1, -1, 7, 6, 12, 13, -1, 8, -1, 11, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 2, 3, 13, 5, 9, 8, 7, -1, 12, 14, 4, -1, 6, 15, -1, 11, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 3, 4, 11, 2, 15, 8, 5, 14, 10, -1, 7, -1, -1, 6, 13, 9, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 2, 5, -1, 3, 10, 11, 4, 12, 13, -1, 6, -1, -1, -1, 7, 9, -1, 14, 15, -1, -1, -1, 8, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 10, -1, 9, 3, 5, 7, 13, -1, 6, -1, 4, 12, 14, -1, 15, -1, 8, -1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 3, 0, 4, 8, 2, -1, 9, 6, -1, 11, -1, 7, -1, 12, 13, 15, 10, 5, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 2, 1, 6, 4, 3, 8, 10, 9, -1, -1, 11, 5, 15, -1, 13, -1, 12, -1, -1, -1, -1, 14, -1, 7, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 8, 6, 9, 2, 10, 7, 4, -1, -1, -1, 11, 15, -1, 13, -1, 3, -1, 14, 5, -1, 12, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 3, -1, -1, 4, 8, -1, 13, 7, 15, 10, 5, 14, 9, -1, -1, -1, -1, -1, -1, 2, 6, 11, 12, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {0, 1, 2, 5, 4, 3, 11, 6, 12, -1, 7, 15, 8, 14, -1, 10, -1, -1, -1, 9, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {7, 1, 2, 8, -1, -1, -1, 3, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 6, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 13, 10, 5, 4, 9, 2, 7, 6, 11, 8, 12, 3, 15, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {2, 0, 1, 8, 5, 3, -1, 7, -1, -1, -1, -1, 4, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 3, -1, -1, 2, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 3, -1, -1, 2, -1, -1, -1, 6, 7, -1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {3, 4, 0, -1, 1, 6, -1, 12, -1, 5, -1, 14, 8, 2, -1, 15, -1, 10, 11, 9, -1, -1, -1, 13, 7, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY},
  {1, 0, 3, -1, -1, 2, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, SHOCO_PY_EMPTY, SHOCO_PY_EMPTY}
};

static const int8_t chrs_by_chr_and_successor_id[MAX_CHR - MIN_CHR][16] = {
  {'A', 'I', 'E', 'O', 'U', 'T', 'B', 'S', 'R', 'Y', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'A', 'E', 'O', 'I', 'U', 'P', 'C', 'D', 'Y', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'A', 'E', 'O', 'I', 'U', 'Y', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'A', 'E', 'O', 'I', 'U', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'R', 'S', 'N', 'T', 'L', 'M', 'I', 'D', 'C', 'B', 'A', 'V', 'G', 'P', 'F', 'K'},
  {'A', 'E', 'O', 'I', 'R', 'L', 'B', 'U', 'S', 'J', 'D', 'T', 'Y', 'V', 'C', 'N'},
  {'A', 'O', 'H', 'I', 'E', 'C', 'U', 'R', 'T', 'L', 'K', 'Y', 'Q', 'S', 'N', 'J'},
  {'E', 'I', 'O', 'A', 'R', 'U', 'S', 'J', 'D', 'B', 'G', 'W', 'V', 'T', 'L', 'K'},
  {'R', 'N', 'S', 'L', 'T', 'M', 'E', 'I', 'A', 'C', 'G', 'D', 'Z', 'P', 'K', 'B'},
  {'I', 'E', 'O', 'A', 'R', 'F', 'L', 'U', 'T', 'S', 'J', 'D', 'G', 'B', 'K', 'V'},
  {'E', 'A', 'I', 'R', 'U', 'O', 'G', 'L', 'S', 'N', 'H', 'J', 'D', 'T', 'M', 'B'},
  {'E', 'I', 'A', 'O', 'T', 'U', 'R', 'Y', 'N', 'L', 'S', 'M', 'J', 'B', 'W', 'P'},
  {'S', 'N', 'E', 'A', 'C', 'T', 'O', 'L', 'G', 'M', 'J', 'R', 'D', 'Z', 'F', 'V'},
  {'E', 'A', 'K', 'O', 'U', 'N', 'D', 'S', 'F', 'T', 'I', 'Z', 'P', 'L', 'G', 'V'},
  {'E', 'A', 'O', 'J', 'L', 'K', 'R', 'S', 'I', 'T', 'N', 'U', 'W', 'B', 'H', 'P'},
  {'A', 'E', 'I', 'O', 'L', 'U', 'T', 'D', 'S', 'M', 'K', 'V', 'P', 'G', 'C', 'B'},
  {'O', 'E', 'A', 'I', 'P', 'M', 'B', 'U', 'S', 'D', 'T', 'K', 'N', 'G', 'V', 'H'},
  {'T', 'D', 'E', 'A', 'S', 'O', 'G', 'I', 'C', 'N', 'K', 'F', 'V', 'Z', 'U', 'B'},
  {'N', 'R', 'S', 'L', 'M', 'O', 'T', 'E', 'P', 'U', 'G', 'C', 'D', 'V', 'B', 'F'},
  {'E', 'A', 'I', 'O', 'R', 'L', 'P', 'U', 'J', 'T', 'S', 'H', 'G', 'B', 'K', 'Z'},
  {'U', 'A', 'I', 'S', 'Q', 'W', 'H', 'E', 'R', 'Z', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'},
  {'E', 'A', 'I', 'O', 'T', 'S', 'D', 'U', 'M', 'G', 'R', 'B', 'N', 'C', 'K', 'P'},
  {'T', 'E', 'S', 'C', 'I', 'A', 'P', 'O', 'U', 'M', 'L', 'J', 'B', 'F', 'G', 'H'},
  {'E', 'I', 'A', 'R', 'J', 'O', 'T', 'U', 'S', 'H', 'B', 'G', 'W', 'K', 'L', 'V'},
  {'R', 'I', 'E', 'L', 'S', 'T', 'N', 'A', 'C', 'M', 'D', 'G', 'B', 'P', 'W', 'F'},
  {'E', 'A', 'I', 'O', 'L', 'R', 'U', 'V', 'Y', 'J', 'N', 'S', 'C', 'D', 'H', 'K'},
  {'E', 'A', 'I', 'O', 'T', 'R', 'S', 'D', 'U', 'H', 'B', 'N', 'L', 'K', 'P', 'M'},
  {'I', 'T', 'P', 'E', 'A', 'C', 'O', 'Y', 'U', 'H', 'J', 'F', 'S', 'Q', 'M', 'B'},
  {'A', 'E', 'S', 'P', 'O', 'T', 'C', 'L', 'M', 'N', 'R', 'D', 'U', 'I', 'B', 'G'},
  {'A', 'E', 'Z', 'I', 'O', 'U', 'W', 'C', 'N', 'G', 'M', 'Q', 'Y', 'L', 'P', 'D'}
};

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable: 4324)    // structure was padded due to __declspec(align())
#endif

typedef struct Pack {
  const uint32_t word;
  const unsigned int bytes_packed;
  const unsigned int bytes_unpacked;
  const unsigned int offsets[8];
  const int16_t _ALIGNED masks[8];
  const char header_mask;
  const char header;
} Pack;

#ifdef _MSC_VER
#pragma warning(pop)
#endif

#define PACK_COUNT 3
#define MAX_SUCCESSOR_N 8

static const Pack packs[PACK_COUNT] = {
  { 0x80000000, 1, 2, { 26, 24, 24, 24, 24, 24, 24 }, { 15, 3, 0, 0, 0, 0, 0 }, 0xc0, 0x80 },
  { 0xc0000000, 2, 4, { 25, 21, 18, 16, 16, 16, 16 }, { 15, 15, 7, 3, 0, 0, 0 }, 0xe0, 0xc0 },
  { 0xe0000000, 4, 8, { 24, 20, 16, 12, 9, 6, 3, 0 }, { 15, 15, 15, 15, 7, 7, 7, 7 }, 0xf0, 0xe0 }
};
